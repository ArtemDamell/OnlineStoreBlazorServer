@page "/category"
@page "/category/{PageNumber:int}"

@inject CategoryService categoryServices
@inject NavigationManager _navManager

@*@attribute [Authorize(Roles = StaticData.AdminRole)]*@

<div class="container-fluid component-title p-4">
	<div class="row justify-content-between align-items-center">
		<div class="col-5">
			<h1 class="text-info">Category List</h1>
		</div>
		<div class="col-3 text-right">
			<button type="button" @onclick="AddNewCategory" class="btn btn-info form-control">
				Add New Category
			</button>
		</div>
	</div>


	@if (categories is null)
	{
		<div class="row">
			<div class="col text-center">
				<img src="https://cdn.dribbble.com/users/108183/screenshots/5331825/loading_xxi.gif" height="200" />
			</div>
		</div>
	}
	else if (categories.Count > 0)
	{

		<nav aria-label="Page navigation example">
			<ul class="pagination justify-content-center">
				<li class="page-item @((PageNumber <= 1) ? "disabled" : "")">
					<a class="page-link" href="category/@(PageNumber - 1)" tabindex="-1" aria-disabled="@((PageNumber <= 1) ? "true" : "false")">Previous</a>
				</li>
				@for (int i = 1; i <= pageSize + 1; i++)
				{
					<li class="page-item @((i == PageNumber) ? "active" : "")">
						<a class="page-link" href="category/@i">@i</a>
					</li>
				}
				<li class="page-item @((PageNumber <= totalCount / pageSize) ? "" : "disabled")">
					<a class="page-link" href="category/@(PageNumber + 1)" aria-disabled="@((PageNumber <= totalCount / pageSize) ? "false" : "true")">Next</a>
				</li>
			</ul>
		</nav>

		<div class="row pt-4 table-r">
			<table class="table table-striped">
				<thead class="bg-info">
					<tr>
						<th>Category Name</th>
						<th></th>
					</tr>
				</thead>
				<tbody>
					@foreach (var item in categories)
					{
						<tr>
							<td>@item.Name</td>
							<td class="text-right">
								<button type="button" @onclick="(() => EditCategory(item))" class="btn btn-primary">Edit</button>
								<button type="button" @onclick="(() => DeleteCategory(item))" class="btn btn-danger">Delete</button>
							</td>
						</tr>
					}
				</tbody>
				<tfoot>
					<tr class="text-right">
						<td></td>
						<td>Category count: @totalCount</td>
					</tr>
				</tfoot>
			</table>
		</div>
	}
	else
	{
		<div class="row">
			<div class="col text-center">
				<img src="https://cdn.dribbble.com/users/1231865/screenshots/11157048/media/bc9427646c632ded563ee076fdc5dfda.jpg?compress=1&resize=800x600" height="200" />
			</div>
		</div>
	}

	@if (showPopUp)
	{
		<div class="modal fade show" tabindex="-1" style="display: block" role="dialog">
			<EditForm Model="@categoryObj" OnValidSubmit="@ValidSubmit">

				<div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
					<div class="modal-content">
						<div class="modal-header">
							<h3 class="text-info">@(!categoryObj.Id.Equals(0) ? "Update" : "Create") Category</h3>
							<button type="button" class="close" @onclick="ClosePopUp" data-dismiss="modal" aria-label="Close">
								<span aria-hidden="true">&times;</span>
							</button>
						</div>
						<div class="modal-body">
							<DataAnnotationsValidator />
							<ValidationSummary />

							<div class="¨row">
								<div class="col-9">
									<div class="row py-2">
										<div class="col-4">
											Category Name
										</div>
										<div class="col-8">
											<input class="form-control" type="text" @bind="categoryObj.Name" />
										</div>
									</div>
								</div>
							</div>
						</div>
						<div class="modal-footer">
							<button type="button" @onclick="ClosePopUp" class="btn btn-secondary" data-dismiss="modal">Close</button>
							<button type="submit" class="btn btn-primary">Save changes</button>
						</div>
					</div>
				</div>

			</EditForm>
		</div>
	}
</div>

@code {
	[Parameter] public int PageNumber { get; set; }
	int totalCount;
	int pageSize = 3;

	List<Category> categories;

	Category categoryObj;
	bool showPopUp = false;

	protected override void OnParametersSet()
	{
		if (PageNumber < 1) PageNumber = 1;
		categories = categoryServices.GetPagedCategoriesAsync(PageNumber, pageSize, out totalCount);
	}

	void AddNewCategory()
	{
		categoryObj = new();
		categoryObj.Id = 0;

		showPopUp = true;
	}

	void EditCategory(Category catForEdit)
	{
		categoryObj = catForEdit;
		showPopUp = true;
	}

	async Task DeleteCategory(Category catForDelete)
	{
		bool result;
		result = await categoryServices.DeleteCategoryAsync(catForDelete);

		if (result)
		{
			categories.Clear();
			categories = categoryServices.GetPagedCategoriesAsync(PageNumber, pageSize, out totalCount);
		}
	}

	void ClosePopUp()
	{
		showPopUp = false;
	}

	async Task ValidSubmit()
	{
		bool result;

		showPopUp = false;

		if (categoryObj.Id.Equals(0))
		{
			result = await categoryServices.CreateCategoryAsync(categoryObj);
		}
		else
			result = await categoryServices.UpdateCategoryAsync(categoryObj);

		categories = categoryServices.GetPagedCategoriesAsync(PageNumber, pageSize, out totalCount);
	}
}
