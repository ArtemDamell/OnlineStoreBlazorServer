@page "/appointmentbooked"
@using BlazorShop.Merchant
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Configuration

@inject NavigationManager nav
@inject IConfiguration _configuration
@inject OrderService _db

<div class="text-center container">
    <div class="row">
        <div class="col-12">
            <h3 class="text-info">Order appointment has been submitted!</h3>
        </div>
        <div class="col-12">
            <img src="https://image.shutterstock.com/image-vector/confirmed-rubber-stamp-260nw-1089804863.jpg" alt="" width="300" />
        </div>
        <div class="col-12">
            <div class="mt-1 mb-2">We will reach out to you within one buisness day confirm your appointment, and we look forward to helping you with best quality and service at the lowest price!</div>
            <div>If you have any questions feel free to reach out at 000-000-0000</div>
        </div>
    </div>
</div>

@if (saveResult is not null)
{
    <div class="row">
        <div class="col-3">
            <label>Customer Name</label>
        </div>
        <div class="col-9">
            @saveResult.Appointment.CustomerName
        </div>
        <div class="col-3">
            <label>Total Price</label>
        </div>
        <div class="col-9">
            @saveResult.PaymentDetails.PaymentPrice
        </div>
        <div class="col-3">
            <label>Payment status</label>
        </div>
        <div class="col-9">
            @saveResult.PaymentDetails.PaymentStatus
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col alert alert-info text-center">
            Wait...
        </div>
    </div>
}

@code {
    Uri uri;
    string payerId;
    string paymentId;
    PayPalResponse result;
    OrderModel saveResult;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            uri = nav.ToAbsoluteUri(nav.Uri);

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("PayerID", out var payer))
                payerId = payer;
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("paymentId", out var payment))
                paymentId = payment;

            var payPalAPI = new PayPalAPI(_configuration);
            result = await payPalAPI.exequtedPayment(paymentId, payerId);

            if (result is not null)
                saveResult = await _db.SavePaymentDetailsAsync(result);
        }
    }
}